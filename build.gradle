buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'com.moowork.node' version '1.1.1'
    id 'com.moowork.gulp' version '1.1.1'
    id 'org.flywaydb.flyway' version '4.1.2'
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${project.projectDir}/src/main/resources/reserv-io.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask',
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: '-wsdl')
                produces(dir: sourcesDir, includes: '**/*.java')
            }

            javac(destdir: classesDir,
                    source: sourceCompatibility,
                    target: sourceCompatibility,
                    debug: true,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: '**/*.java')
                include(name: '*.java')
            }

            //noinspection GroovyAssignabilityCheck
            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: '**/*.java')
                }
            }
        }
    }
}

war {
    baseName = 'reserv-io'
    version = '0.0.1-SNAPSHOT'
    //noinspection GroovyAssignabilityCheck
    from genJaxb.classesDir
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    providedRuntime
    jaxb
}

bootRun {
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.properties
}

test {
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.properties
}

final springSessionVersion = '1.3.0.RELEASE'
final springBootVersion = '1.5.1.RELEASE'
final mysqlVersion = '6.0.5'
final lombokVersion = '1.16.14'
final hibernateVersion = '5.2.8.Final'
final hibernateValidatorVersion = '5.4.0.Final'
final jacksonVersion = '2.8.6'
final wsdl4jVersion = '1.6.3'
final activityVersion = '5.22.0'
final slf4jVersion = '1.7.25'
final jaxbVersion = '2.2.11'
final apacheCommonsLangVersion = '3.5'
final jade4jVersion = '1.1.4'
final frontendDir = "${project.projectDir}/frontend"

node {
    version = '7.7.2'
    npmVersion = '4.4.1'
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    workDir = file(frontendDir + '/nodejs')
    nodeModulesDir = file(frontendDir)
}

gulp {
    workDir = file(frontendDir)
    colors = true
    bufferOutput = true
}

dependencies {
    //noinspection GroovyAssignabilityCheck
    compile(
            [group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: springBootVersion],

            [group: 'org.hibernate', name: 'hibernate-core', version: hibernateVersion],
            [group: 'org.hibernate', name: 'hibernate-entitymanager', version: hibernateVersion],
            [group: 'org.hibernate', name: 'hibernate-validator', version: hibernateValidatorVersion],

            [group: 'org.springframework.session', name: 'spring-session', version: springSessionVersion],
            [group: 'org.springframework.session', name: 'spring-session-jdbc', version: springSessionVersion],

            [group: 'org.activiti', name: 'activiti-spring-boot-starter-jpa', version: activityVersion],
            [group: 'org.activiti', name: 'activiti-spring-boot-starter-basic', version: activityVersion],

            [group: 'wsdl4j', name: 'wsdl4j', version: wsdl4jVersion],
            [group: 'de.neuland-bfi', name: 'spring-jade4j', version: jade4jVersion],
            [group: 'org.apache.commons', name: 'commons-lang3', version: apacheCommonsLangVersion],
            [group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion],
            files(genJaxb.classesDir).builtBy(genJaxb)
    )
    runtime(
            [group: 'mysql', name: 'mysql-connector-java', version: mysqlVersion],
    )
    compileOnly(
            [group: 'org.projectlombok', name: 'lombok', version: lombokVersion],
    )
    providedRuntime(
            [group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: springBootVersion],
    )
    testCompile(
            [group: 'junit', name: 'junit', version: '4.12'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion],
    )
    jaxb(
            [group: 'org.glassfish.jaxb', name: 'jaxb-xjc', version: jaxbVersion]
    )
}

task prepareEnvironment {
    doLast {
        nodeSetup.execute()
        npmSetup.execute()
        npmInstall.execute()
        installGulp.execute()
    }
}

task cleanFrontend {
    doLast {
        delete frontendDir + '/build/bundle'
        delete frontendDir + '/static'
    }
}

task gulpBuild(type: GulpTask) {
    args = ['build']
}

task copyBundles(type: Copy) {
    from frontendDir + 'build'
    into 'static'
}

task rebuildFrontend {
    doLast {
        cleanFrontend.execute()
        gulpBuild.execute()
        copyBundles.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}

flyway {
    driver = 'com.mysql.cj.jdbc.Driver'
    url = 'jdbc:mysql://localhost:3306?useSSL=true&useJDBCCompliantTimezoneShift=true&serverTimezone=UTC'
    user = 'root'
    password = 'YEPYEPYEP'
    baselineVersion = '0'
    baselineDescription = 'Flyway init'
    schemas = ['reserv-io']
    baselineOnMigrate = true
    locations = ["filesystem:${project.projectDir}/schema_versions/mysql"]
}